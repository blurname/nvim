{
  "todo": {
    "prefix": "td",
    "body": "// TODO: bl: ${0}"
  },
  "setTimeout": {
    "prefix": "st",
    "body": "setTimeout(() => {\n\t${0}\n}, ${1:delay})"
  },
  "setInterval": {
    "prefix": "si",
    "body": "setInterval(() => {\n\t${0}\n}, ${1:delay})"
  },
  "setImmediate": {
    "prefix": "sim",
    "body": "setImmediate(() => {\n\t${0}\n})"
  },
  "await": {
    "prefix": "a",
    "body": "await ${0}"
  },
  "await Promise.all": {
    "prefix": "apa",
    "body": "await Promise.all(${1:value})"
  },
  "await Promise.all with destructuring": {
    "prefix": "apad",
    "body": "const [${0}] = await Promise.all(${1:value})"
  },
  "await Promise.all map": {
    "prefix": "apm",
    "body": "await Promise.all(${1:array}.map(async (${2:value}) => {\n\t${0}\n}))"
  },
  "await sleep": {
    "prefix": "ast",
    "body": "await new Promise((r) => setTimeout(r, ${0}))"
  },
  "Node callback": {
    "prefix": "cb",
    "body": "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"
  },
  "process.env": {
    "prefix": "pe",
    "body": "process.env"
  },
  "Promise.all": {
    "prefix": "pa",
    "body": "Promise.all(${1:value})"
  },
  "Promise.resolve": {
    "prefix": "prs",
    "body": "Promise.resolve(${1:value})"
  },
  "Promise.reject": {
    "prefix": "prj",
    "body": "Promise.reject(${1:value})"
  },
  "Promise": {
    "prefix": "p",
    "body": "Promise"
  },
  "new Promise": {
    "prefix": "np",
    "body": "new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "Promise.then": {
    "prefix": "pt",
    "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})"
  },
  "Promise.catch": {
    "prefix": "pc",
    "body": "${1:promise}.catch(error => {\n\t${0}\n})"
  },
  "event handler": {
    "prefix": "on",
    "body": "${1:emitter}.on('${2:event}', (${3:args}) => {\n\t${0}\n})"
  },
  "dom event cancel default and propagation": {
    "prefix": "evc",
    "body": "ev.preventDefault()\nev.stopPropagation()\nreturn false"
  },
  "addEventListener": {
    "prefix": "ael",
    "body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "rel",
    "body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
  },
  "getElementById": {
    "prefix": "gi",
    "body": "${1:document}.getElementById('${2:id}')"
  },
  "getElementsByClassName": {
    "prefix": "gc",
    "body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
  },
  "getElementsByTagName": {
    "prefix": "gt",
    "body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "Array.fro(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "forEach loop": {
    "prefix": "fe",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "let statement": {
    "prefix": "l",
    "body": "let ${1:name} = "
  },
  "const statement": {
    "prefix": "c",
    "body": "const ${1:name} = ${2}"
  },
  "const statement from destructuring": {
    "prefix": "cd",
    "body": "const { ${2} } = ${1}"
  },
  "const statement from array destructuring": {
    "prefix": "cad",
    "body": "const [ ${2} ] = ${1}"
  },
  "const assignment awaited": {
    "prefix": "ca",
    "body": "const ${1} = await ${2}"
  },
  "const destructuring assignment awaited": {
    "prefix": "cda",
    "body": "const { ${1:name} } = await ${2:value}"
  },
  "const literal object": {
    "prefix": "clo",
    "body": "const $1 = {\n\t$2\n}"
  },
  "const literal array": {
    "prefix": "cla",
    "body": "const $1 = [\n\t$2\n]"
  },
  "const arrow function assignment": {
    "prefix": "cf",
    "body": "const $1 = ($2) => {\n\t$3\n\treturn ${0}\n}"
  },
  "class arrow function assignment": {
    "prefix": "clf",
    "body": "$1 = ($2) => {\n\t$3\n\treturn ${0}\n}"
  },
  "const arrow function rerutrn object": {
    "prefix": "cfo",
    "body": "const $1 = ($2) => ({\n\t$3\n\t\n})"
  },
  "epxort const arrow function assignment": {
    "prefix": "ecf",
    "body": "export const $1 = ($2) => {\n\t$3\n\treturn ${0}\n}"
  },
  "let assignment awaited": {
    "prefix": "la",
    "body": "let ${1:name} = await ${2:value}"
  },
  "const assignment yielded": {
    "prefix": "cy",
    "body": "const ${1:name} = yield ${2:value}"
  },
  "let assignment yielded": {
    "prefix": "ly",
    "body": "let ${1:name} = yield ${2:value}"
  },
  "const object": {
    "prefix": "co",
    "body": "const ${1:name} = {\n\t${0}\n}"
  },
  "const array": {
    "prefix": "car",
    "body": "const ${1:name} = [\n\t${0}\n]"
  },
  "generate array of integers starting with 1": {
    "prefix": "gari",
    "body": "Array.from({ length: ${1:length} }, (v, k) => k + 1)"
  },
  "generate array of integers starting with 0": {
    "prefix": "gari0",
    "body": "[...Array(${1:length}).keys()]"
  },
  "class": {
    "prefix": "cs",
    "body": "class ${1:name} {\n\tconstructor (${2:args}) {\n\t\t${0}\n\t}\n}"
  },
  "class extends": {
    "prefix": "csx",
    "body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:args}) {\n\t\tsuper(${3:args})\n\t\t${0}\n\t}\n}"
  },
  "module export": {
    "prefix": "e",
    "body": "export ${1:member}"
  },
  "import module": {
    "prefix": "im",
    "body": "import { $2 } from '${1}'"
  },
  "import module as": {
    "prefix": "ima",
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "typeof": {
    "prefix": "to",
    "body": "typeof ${1:source} === '${2:undefined}'"
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${2:Object}"
  },
  "Array.isArray()": {
    "prefix": "ia",
    "body": "Array.isArray(${1:source})"
  },
  "let and if statement": {
    "prefix": "lif",
    "body": "let ${0} \n if (${2:condition}) {\n\t${1}\n}"
  },
  "if statement": {
    "prefix": "if",
    "body": "if (${1:condition}) {\n\t${0}\n}"
  },
  "else statement": {
    "prefix": "el",
    "body": "else {\n\t${0}\n}"
  },
  "if/else statement": {
    "prefix": "ife",
    "body": "if (${1}) {\n\t${0}\n} else {\n\t\n}"
  },
  "else if statement": {
    "prefix": "ei",
    "body": "else if (${1}) {\n\t${0}\n}"
  },
  "while iteration decrementing": {
    "prefix": "wid",
    "body": "let ${1:array}Index = ${1:array}.length\nwhile (${1:array}Index--) {\n\t${0}\n}"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "})"],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const key in ${1:object}) {",
      "\t\tconst ${3:element} = ${1:object}[key]",
      "\t\t$0",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${2:iterator} of ${1:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "For-let Loop": {
    "prefix": "forlet",
    "body": ["for (let x=0; x<${1:array}; x++) {", "\t$0", "}"],
    "description": "For-let Loop"
  },
  "array for of": {
    "prefix": "forofe",
    "body": ["for (const [key, value] of ${1:arr}.entries()) {", "\t$0", "}"],
    "description": "array For-Of Loop"
  },

  "throw new Error": {
    "prefix": "tn",
    "body": "throw new ${0:error}"
  },
  "try/catch": {
    "prefix": "tc",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/finally": {
    "prefix": "tf",
    "body": "try {\n\t${0}\n} finally {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "anonymous function": {
    "prefix": "fan",
    "body": "function (${1:args}) {${0}}"
  },
  "named function": {
    "prefix": "fn",
    "body": "function ${1:name} (${2:args}) {\n\t${0}\n}"
  },
  "export named function": {
    "prefix": "efn",
    "body": "export function ${1} (${2}) {\n\treturn ${0}\n}"
  },
  "named function in class": {
    "prefix": "fcl",
    "body": "${1:name} (${2:args}) {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "afn",
    "body": "async function (${1:args}) {\n\t${0}\n}"
  },
  "async arrow function": {
    "prefix": "aa",
    "body": "async (${1:args}) => {\n\t${0}\n}"
  },
  "arrow function": {
    "prefix": "af",
    "body": "($1) => { return $2}"
  },
  "arrow function with body": {
    "prefix": "afb",
    "body": "($1) => {\n\t$2\n}"
  },
  "generator function": {
    "prefix": "gf",
    "body": "function* (${1:args}) {\n\t${0}\n}"
  },
  "named generator": {
    "prefix": "gfn",
    "body": "function* ${1:name}(${2:args}) {\n\t${0}\n}"
  },
  "console.log": {
    "prefix": "cl",
    "body": "console.log(${0})"
  },
  "console.log with name": {
    "prefix": "cln",
    "body": "console.log('${0}', ${1})"
  },
  "console.log a variable": {
    "prefix": "cv",
    "body": "console.log('${0}:', ${0})"
  },
  "console.dir": {
    "prefix": "cod",
    "body": "console.dir('${0}:', ${0})"
  },
  "constructor": {
    "prefix": "cons",
    "body": "constructor () {\n\t${0}\n}"
  },
  "JSON.stringify()": {
    "prefix": "js",
    "body": "JSON.stringify($0)"
  },
  "JSON.stringify(a,null,2)": {
    "prefix": "jsl",
    "body": "JSON.stringify($0,null,2)"
  },
  "JSON.parse()": {
    "prefix": "jp",
    "body": "JSON.parse($0)"
  },
  "JSON.stringify & parse": {
    "prefix": "jsp",
    "body": "JSON.parse(JSON.stringify($0))"
  },
  "getter": {
    "prefix": "get",
    "body": "get ${1:property} () {\n\t${0}\n}"
  },
  "setter": {
    "prefix": "set",
    "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
  },
  "getter + setter": {
    "prefix": "gs",
    "body": "get ${1:property} () {\n\t${0}\n}\nset ${1:property} (${2:value}) {\n\t\n}"
  },
  "Object.assign": {
    "prefix": "oa",
    "body": "Object.assign(${1}, ${2})"
  },
  "Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${0})"
  },
  "Object.entries": {
    "prefix": "oe",
    "body": "Object.entries(${0})"
  },
  "Object.values": {
    "prefix": "ov",
    "body": "Object.values(${0})"
  },
  "return object": {
    "prefix": "ro",
    "body": "return {\n\t${0}\n}"
  },
  "return new array": {
    "prefix": "ra",
    "body": "return [\n\t${0}\n]"
  },
  "return promise": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "wrap selection in arrow function": {
    "prefix": "wrap selection in arrow function",
    "body": "() => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "wrap selection in async arrow function": {
    "prefix": "wrap selection in async arrow function",
    "body": "async () => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "New Statement": {
    "prefix": "cn",
    "body": ["const ${1:name} = new ${2:type}(${3:args});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "sc",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}: {",
      "\t\t$0",
      "\t\tbreak",
      "\t}",
      "",
      "\tcase ${2:value}: {",
      "\t\t$0",
      "\t\tbreak",
      "\t}",
      "",
      "\tdefault: {",
      "\t\tbreak",
      "\t}",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "Set Interval Function"
  },
  "Import external module.": {
    "prefix": "if",
    "body": ["import { $1 } from \"$0\""],
    "description": "Import external module."
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": ["console.warn($1)", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": ["console.error($1)", "$0"],
    "description": "Log error to the console"
  },
  "useState": {
    "prefix": "ush",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)$0"],
    "description": "React useState() hook"
  },
  "useEffect": {
    "prefix": "ueh",
    "body": [
      "useEffect(() => {",
      "\t",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3}])$0"
    ],
    "description": "React useEffect() hook"
  },
  "useContext": {
    "prefix": "uch",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucbh",
    "body": [
      "const ${1} = useCallback(",
      "\t() => {",
      "\t\t${2}(${3})",
      "\t},",
      "\t[${4}],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "umh",
    "body": [
      "const ${1} = useMemo(() => ${2}( ${3} ), [${4}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "import react hooks": {
    "prefix": "irh",
    "body": [
      "import React, { useState, useContext, useEffect, useCallback, useMemo } from 'react'"
    ]
  },
  "useRef": {
    "prefix": "urh",
    "body": ["const $1 = useRef($2)$0"],
    "description": "React useRef() hook"
  },
  "useDispatch": {
    "prefix": "usd",
    "body": ["const $1 = $2 => dispatch($3)"]
  },
  "textComment":{
    "prefix": "cm",
    "body": ["/**\n  * ${1}\n**/"]
  },
  "styled-conponent" :{
    "prefix": "sp",
    "body":["${props => props.theme.$1};"]
  },
  "console.log-performmnce-start":{
    "prefix": "cps",
    "body":[
      "const $1Start = performance.now()"
    ]
  },
  "console.log-performmnce-end":{
    "prefix": "cpe",
    "body":[

      "const $1Consume = performance.now() - $1Start",
      "console.log('$1-comsume-time', $1Consume)"
    ]
  }
}
